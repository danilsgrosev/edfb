import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
from monopoly.game import Game
from monopoly.board_image import draw_board, get_board_image_bytes

TOKEN = "8324318371:AAGTWZgvkDGQ59-1iO299FZFx6nZmbsl7Fg"
games = {}  # chat_id -> Game
game_creators = {}  # chat_id -> user_id

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

def get_start_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="new_game")]
    ])

def get_lobby_keyboard(joined, max_players, can_start):
    buttons = [
        [InlineKeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join_game")]
    ]
    if can_start:
        buttons.append([InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="begin_game")])
    return InlineKeyboardMarkup(buttons)

def get_game_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏ üé≤", callback_data="roll_dice"),
         InlineKeyboardButton("–ö—É–ø–∏—Ç—å –∫–ª–µ—Ç–∫—É üè†", callback_data="buy_property")]
    ])

def format_status(game: Game):
    lines = []
    for player in game.players:
        # –ó–∞–º–µ–Ω–∏—Ç–µ 'balance' –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –¥–µ–Ω–µ–≥!
        lines.append(f"@{player.username}: {player.balance}‚ÇΩ")
    lines.append("")
    lines.append(f"–°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥: @{game.get_current_player().username}")
    return "\n".join(lines)

async def send_game_status_with_board(context, chat_id, game, extra_text=None, reply_markup=None):
    img = draw_board(game)
    bio = get_board_image_bytes(img)
    caption = format_status(game)
    if extra_text:
        caption += "\n\n" + extra_text
    await context.bot.send_photo(chat_id=chat_id, photo=bio, caption=caption, reply_markup=reply_markup, parse_mode=None)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = (
        "–í–∞—Å—Å–∞–ø –∫–∞–ø–∏—Ç–∞–ª–∏—Å—Ç—ã, —ç—Ç–æ –∏–≥—Ä–∞ –ø—Ä–æ –Ω–∞—à –∑–∞–≥–Ω–∏–≤–∞—é—â–∏–π –∑–∞–ø–∞–¥, –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º \"–º–æ–Ω–æ–ø–æ–ª–∏—è\"\n"
        "–¢—ã–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ."
    )
    keyboard = get_start_keyboard()
    if update.message:
        await update.message.reply_text(text, reply_markup=keyboard, parse_mode=None)
    else:
        await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=keyboard, parse_mode=None)

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    chat_id = query.message.chat.id

    await query.answer()
    data = query.data

    if data == "new_game":
        games[chat_id] = Game(chat_id)
        game_creators[chat_id] = user.id
        await query.edit_message_text(
            f"–ß—Ç–æ–± –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –∫ –∏–≥—Ä–µ —Ç—ã–∫–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è\"\n–ò–≥—Ä–æ–∫–æ–≤ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–æ—Å—å: 0/6",
            reply_markup=get_lobby_keyboard(0, 6, False),
            parse_mode=None
        )

    elif data == "join_game":
        if chat_id not in games:
            await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É!", parse_mode=None)
            return
        game = games[chat_id]
        joined = len(game.players)
        if user.id not in [p.user_id for p in game.players]:
            ok = game.add_player(user.id, user.username or user.full_name, "")
            joined += 1
        can_start = joined >= 2
        if joined >= 6:
            game.start()
            await send_game_status_with_board(context, chat_id, game, reply_markup=get_game_keyboard())
        else:
            await query.edit_message_text(
                f"–ß—Ç–æ–± –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –∫ –∏–≥—Ä–µ —Ç—ã–∫–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è\"\n–ò–≥—Ä–æ–∫–æ–≤ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–æ—Å—å: {joined}/6",
                reply_markup=get_lobby_keyboard(joined, 6, can_start),
                parse_mode=None
            )

    elif data == "begin_game":
        game = games.get(chat_id)
        if not game:
            await query.edit_message_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.", parse_mode=None)
            return
        joined = len(game.players)
        if joined < 2:
            await query.edit_message_text("–ú–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞!", parse_mode=None)
            return
        if user.id == game_creators.get(chat_id):
            game.start()
            await send_game_status_with_board(context, chat_id, game, reply_markup=get_game_keyboard())
        else:
            await query.edit_message_text("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å!", parse_mode=None)

    elif data == "roll_dice":
        game = games.get(chat_id)
        cp = game.get_current_player()
        if user.id != cp.user_id:
            await query.answer("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!", show_alert=True)
            return
        dice = game.roll_dice()
        ok, msg = game.process_turn(user.id, dice)
        extra_text = f"–í—ã –≤—ã–±—Ä–æ—Å–∏–ª–∏: {dice[0]} –∏ {dice[1]}\n{msg}"
        await send_game_status_with_board(context, chat_id, game, extra_text, reply_markup=get_game_keyboard())
        if ok:
            game.next_turn()
            await send_game_status_with_board(context, chat_id, game, reply_markup=get_game_keyboard())

    elif data == "buy_property":
        game = games.get(chat_id)
        cp = game.get_current_player()
        if user.id != cp.user_id:
            await query.answer("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!", show_alert=True)
            return
        ok, msg = game.buy_property(user.id)
        await send_game_status_with_board(context, chat_id, game, msg, reply_markup=get_game_keyboard())

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(callback_handler))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()